<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2rayclashx.github.io/news/article-23229.htm" />
    <meta charset="utf-8">
    <title>SSM框架-SpringMVC详解</title>
        <meta name="description" content="Springmvc是spring框架的一个模块，spring和springmvc无需中间整合层整合。 Springmvc是一个基于mvc的web框架 表现层的三大任务：   URL到controlle" />
        <link rel="icon" href="__ADDON__/img/v2rayclashx/favicon.ico" type="image/x-icon"/>
    <!-- mobile responsive meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!-- ** Plugins Needed for the Project ** -->
    <!-- Bootstrap -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayclashx/bootstrap/bootstrap.min.css">
    <!-- themefy-icon -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayclashx/themify-icons/themify-icons.css">
    <!-- slick slider -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayclashx/slick/slick.css">
    <!-- venobox popup -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayclashx/Venobox/venobox.css">
    <!-- aos -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayclashx/aos/aos.css">
    <!-- Main Stylesheet -->
    <link href="/assets/website/css/v2rayclashx/style.css" rel="stylesheet">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-YZ6HC6HRBC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-YZ6HC6HRBC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- navigation -->
    <section class="fixed-top navigation">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                    <span>V2ray Clash X</span>
                </a>
                                <button class="navbar-toggler border-0" type="button" data-toggle="collapse" data-target="#navbar" aria-controls="navbar" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <!-- navbar -->
                <div class="collapse navbar-collapse text-center" id="navbar">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </section>
    <!-- /navigation -->
    <!-- about us -->
    <section class="section-lg about pb-0">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <h2 class="section-title">SSM框架-SpringMVC详解</h2>
                </div>
                <div class="col-lg-12 mb-100">
                    <p>
                      <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
            </div>
        </div>
        <!-- background shapes -->
        <img src="/assets/website/img/v2rayclashx/background-shape/green-dot.png" alt="background-shape" class="about-bg-1 up-down-animation">
        <img src="/assets/website/img/v2rayclashx/background-shape/blue-dot.png" alt="background-shape" class="about-bg-2 left-right-animation">
        <img src="/assets/website/img/v2rayclashx/background-shape/green-half-cycle.png" alt="background-shape" class="about-bg-3 up-down-animation">
        <img src="/assets/website/img/v2rayclashx/background-shape/seo-ball-1.png" alt="background-shape" class="about-bg-4 left-right-animation">
        <img src="/assets/website/img/v2rayclashx/background-shape/team-bg-triangle.png" alt="background-shape" class="about-bg-5 up-down-animation">
        <img src="/assets/website/img/v2rayclashx/background-shape/service-half-cycle.png" alt="background-shape" class="about-bg-6 left-right-animation">
    </section>
    <!-- /about us -->
    <!-- feature -->
    <section class="section feature mb-0" id="feature">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>Springmvc是spring框架的一个模块，spring和springmvc无需中间整合层整合。</p> <p>Springmvc是一个基于mvc的web框架</p> <p>表现层的三大任务：</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/ac5a2dc526b246d3f661599d8d3bbca5.jpg"></p> <ul> <li>URL到controller的映射</li> <li>http请求参数绑定</li> <li>http响应的生成和输出</li> </ul> </h1> <p>MVC设计模式是一种通用的软件编程思想。</p> <p>在MVC设计模式中认为, 任何软件都可以分为三部分组成：</p> <p>(1)控制程序流转的控制器（Controller）</p> <p>(2)封装数据处理数据的模型（Model）</p> <p>(3)负责展示数据的视图（view）</p> </h1> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/fd52f1a340b854e822f95ee4ad35030f.jpg"></p> <p>(1) .用户发送请求 至 前端控制器(DispatcherServlet)；</p> <p>提示：DispatcherServlet的作用：接收请求，调用其它组件处理请求，响应结 果，相当于转发器、中央处理器，是整个流程控制的中心</p> <p>(2) .前端控制器(DispatcherServlet)收到请求后调用处理器映射器 (HandlerMapping)</p> <p>处理器映射器(HandlerMapping)找到具体的Controller(可以根据xml配置、注解进 行查找)，并将Controller返回给DispatcherServlet；</p> <p>(3) .前端控制器(DispatcherServlet)调用处理器适配器(HandlerAdapter)。处理 器适配器经过适配调用具体的Controller；(Controller--&gt; service --&gt; Dao --&gt; 数据库)</p> <p>Controller执行完成后返回ModelAndView，</p> <p>提示：Model(模型数据，即Controller处理的结果，Map) View(逻辑视图名，即 负责展示结果的JSP页面的名字)</p> <p>处理器适配器(HandlerAdapter)将controller执行的结果(ModelAndView)返回给前 端控制器(DispatcherServlet)；</p> <p>(4) .前端控制器(DispatcherServlet)将执行的结果(ModelAndView)传给视图解析 器(ViewReslover)</p> <p>视图解析器(ViewReslover)根据View(逻辑视图名)解析后返回具体JSP页面</p> <p>(5) .前端控制器(DispatcherServlet)根据Model对View进行渲染（即将模型数据 填充至视图中）；</p> <p>前端控制器(DispatcherServlet)将填充了数据的网页响应给用户</p> </h1> <p>第一步：创建maven项目springmvc</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/a0c8bf65305d689766193221d730478c.jpg"></p> <p>第二步：在pom文件中添加依赖</p> <pre><code>&lt;dependencies&gt;     &lt;!-- 单元测试 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;junit&lt;/groupId&gt;         &lt;artifactId&gt;junit&lt;/artifactId&gt;         &lt;version&gt;4.10&lt;/version&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- SpringMVC的jar包 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;         &lt;version&gt;4.1.3.RELEASE&lt;/version&gt;     &lt;/dependency&gt;     &lt;!-- servlet 和 jsp的jar包 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.servlet&lt;/groupId&gt;         &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;         &lt;version&gt;2.5&lt;/version&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.servlet&lt;/groupId&gt;         &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;         &lt;version&gt;2.0&lt;/version&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- java对象转换json的工具类     &lt;dependency&gt;         &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;         &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;         &lt;version&gt;2.5.1&lt;/version&gt;     &lt;/dependency&gt;     --&gt; &lt;/dependencies&gt;</code></pre> <p>第三步：web.xml中配置前端控制器</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns="http://java.sun.com/xml/ns/javaee"          xsi:schemaLocation="http://java.sun.com/xml/ns/javaee                              http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"          id="WebApp_ID" version="2.5"&gt;     &lt;!-- 配置springmvc前端控制器, 将所有请求交给springmvc来处理 --&gt;     &lt;servlet&gt;         &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;         &lt;servletclass&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;     &lt;!-- 配置springmvc核心配置文件的位置，默认Springmvc的配置文件是在     WEB-INF目录下，默认的名字为springmvc-servlet.xml，如果要放在其他目录，则     需要指定如下配置：     --&gt;     &lt;init-param&gt;         &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;         &lt;param-value&gt;classpath:springmvc-config.xml&lt;/param-value&gt;     &lt;/init-param&gt;     &lt;/servlet&gt;     &lt;!-- 其中的斜杠（/）表示拦截所有请求（除JSP以外）, 所有请求都要经过     springmvc前端控制器 --&gt;     &lt;servlet-mapping&gt;         &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;         &lt;url-pattern&gt;/&lt;/url-pattern&gt;     &lt;/servlet-mapping&gt; &lt;/web-app&gt;</code></pre> <p>第四步：创建并配置springmvc-config.xml</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:mvc="http://www.springframework.org/schema/mvc"        xmlns:context="http://www.springframework.org/schema/context"        xsi:schemaLocation="http://www.springframework.org/schema/mvc                            http://www.springframework.org/schema/mvc/spring-mvc4.0.xsd                            http://www.springframework.org/schema/beans                            http://www.springframework.org/schema/beans/springbeans-4.0.xsd                            http://www.springframework.org/schema/context                            http://www.springframework.org/schema/context/spring-context4.0.xsd"&gt;     &lt;!-- 1.配置前端控制器放行静态资源(html/css/js等，否则静态资源将无法访问) --&gt;     &lt;mvc:default-servlet-handler/&gt;     &lt;!-- 2.配置注解驱动，用于识别注解（比如@Controller） --&gt;     &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;     &lt;!-- 3.配置需要扫描的包：spring自动去扫描 base-package 下的类，     如果扫描到的类上有 @Controller、@Service、@Component等注解，     将会自动将类注册为bean--&gt;     &lt;context:component-scan base-package="com.tedu.controller"&gt;     &lt;/context:component-scan&gt;     &lt;!-- 4.配置内部资源视图解析器     prefix:配置路径前缀     suffix:配置文件后缀     --&gt;     &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;         &lt;property name="prefix" value="/WEB-INF/pages/"/&gt;         &lt;property name="suffix" value=".jsp"/&gt;</code></pre> <p>第五步：创建HelloController</p> </h1> <p>restController返回json对象</p> <p>controller返回string：modelandview</p> <p>controller+responsebody返回json对象</p> <pre><code>package com.tedu.controller;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping;  /* @Controller，如果当前类所在的包配置了Spring容器包扫描，具有  * 该注解的类，就会作为bean注册到spring容器中，由spring容器  * 创建实例。 */ @Controller public class HelloController {     /* @RequestMapping为当前方法配置访问路径      * 当浏览器访问http://localhost:8080/day20-springmvc/hello            * 如果Controller类上没有配置访问路径，当前项目中所有      *     controller中方法上的访问路径都不同冲突！ */     @RequestMapping("/hello")     public String testHello() {         System.out.println( "HelloController.testHello()" );         System.out.println( "hello springmvc..." );         //跳转到 /WEB-INF/pages/home.jsp         return "home";     } }</code></pre> <p>第六步：创建并实现home.jsp</p> <p>在WEB-INF/pages/目录下，创建home.jsp页面。</p> <pre><code>&lt;%@ page language="java" contentType="text/html; charset=UTF-8"     pageEncoding="UTF-8"%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;h1&gt;day20-springmvc...home.jsp...&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>第七步：发送请求，进行测试</p> <blockquote> <p>打开浏览器，输入url地址： http://localhost :8080/day16-springmv/hello 地址。</p> </blockquote> </h1> <p>重定向redirect和转发forward的区别</p> <p>1，重定向浏览器地址栏显示新的地址，转发地址栏不变</p> <p>2，重定向可以重定向别的网站，转发只能转发到本网站中的方法。</p> </h1> <p>适用于原先的网页不继续提供服务了。</p> <pre><code>@Controller public class UserController {     //重定向，原先的登录地址     @RequestMapping("/login")     public String login() {         return "redirect:https://passport.jd.com/new/login.aspx";     } }</code></pre> <p>http://localhost:8080/login</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/a7d0d76f6f2f8a2cd08ab2a5b7653bb1.jpg"></p> <p>转发后浏览器的地址栏变为转发后的地址。</p> <p>在chrome的调试窗口中network中查看status code</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/5ccf6d18e5ef14b9fc40c9e96d65f2e1.jpg"></p> </h1> <p>转发后浏览器地址栏还是原来的地址。所以转发前请求的参数在转发后仍然可以读取到。</p> <pre><code>//第一输入用户名和密码     @RequestMapping("/loginByName")     @ResponseBody     public String loginByNamePwd(String username,String password) {                  return "login";     }          //再次登录时，还要输入验证码     @RequestMapping("/loginByCode")     public String loginByCode(String username,String password,String code) {         //判断验证码是否正确         return "forward:/loginByName";     }</code></pre> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/258bf99b13f6ce3e58738ded5aa45a32.jpg"></p> </h1> <p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上</p> <p>形成RUSTFul形式，这将是未来的发展趋势。它更加简洁，安全。强化URL GET访问方式。</p> <pre><code>@RestController public class OrderCotroller {     @RequestMapping("/order/{startTime}/{endTime}")     public String searchByDate(@PathVariable String startTime,             @PathVariable String endTime) {         return "restful startTime="+startTime+",endtime="+endtime;     } }</code></pre> <p>浏览器访问的URL</p> <blockquote> <p>http://localhost :8080/order/2019-10-01/2020-10-10</p> </blockquote> <p>自动将URL 中模板变量{startTime}和{endTime}绑定到@PathVariable注解的同名参数上，即入参后startTime=“2019-10-01”、endTime=“2020-10-10”。</p> <p></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-23228.htm">Mybatis中，返回一个多条数据（List）时，resultType的值指定的不是List，而是List中的元素类型</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-29-node-share.htm" title="10月29日→22M/S|2024年最新免费节点V2ray ClashX订阅链接地址">10月29日→22M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-22781.htm" title="宠物商品粮有哪些（宠物商品粮有哪些品种）">宠物商品粮有哪些（宠物商品粮有哪些品种）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-13-node-share.htm" title="9月13日→20.5M/S|2024年最新免费节点V2ray ClashX订阅链接地址">9月13日→20.5M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-6-free-node-subscribe.htm" title="12月6日→18M/S|2024年最新免费节点V2ray ClashX订阅链接地址">12月6日→18M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-2-node-share.htm" title="11月2日→20.5M/S|2024年最新免费节点V2ray ClashX订阅链接地址">11月2日→20.5M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-28-clash-v2ray-ss-ssr.htm" title="9月28日→20.2M/S|2024年最新免费节点V2ray ClashX订阅链接地址">9月28日→20.2M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-11-free-high-speed-nodes.htm" title="11月11日→22.3M/S|2024年最新免费节点V2ray ClashX订阅链接地址">11月11日→22.3M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-14-free-node-subscribe.htm" title="10月14日→23M/S|2024年最新免费节点V2ray ClashX订阅链接地址">10月14日→23M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-23-free-v2ray.htm" title="11月23日→20.3M/S|2024年最新免费节点V2ray ClashX订阅链接地址">11月23日→20.3M/S|2024年最新免费节点V2ray ClashX订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-21857.htm" title="修改docker 默认镜像存储路径">修改docker 默认镜像存储路径</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
        <img class="feature-bg-1 up-down-animation" src="/assets/website/img/v2rayclashx/background-shape/feature-bg-1.png" alt="bg-shape">
        <img class="feature-bg-2 left-right-animation" src="/assets/website/img/v2rayclashx/background-shape/feature-bg-2.png" alt="bg-shape">
    </section>
    <!-- /feature -->
        <!-- footer -->
    <footer class="footer-section footer" style="background-image: url(/assets/website/img/v2rayclashx/backgrounds/footer-bg.png);">
        <div class="container">
            <div class="row">
                <div class="col-lg-4 text-center text-lg-left mb-4 mb-lg-0">
                    <a href="/">V2ray ClashX机场节点订阅官网</a> 版权所有 Powered by WordPress
                </div>
                <!-- footer social icon -->
                <nav class="col-12">
                    <ul class="list-inline text-lg-right text-center social-icon">
                        <li class="list-inline-item">
                            <a class="facebook" href="#"><i class="ti-facebook"></i></a>
                        </li>
                        <li class="list-inline-item">
                            <a class="twitter" href="#"><i class="ti-twitter-alt"></i></a>
                        </li>
                        <li class="list-inline-item">
                            <a class="linkedin" href="#"><i class="ti-linkedin"></i></a>
                        </li>
                        <li class="list-inline-item">
                            <a class="black" href="#"><i class="ti-github"></i></a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </footer>
    <!-- /footer -->
    <!-- jQuery -->
    <script src="/assets/website/js/frontend/v2rayclashx/jQuery/jquery.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="/assets/website/js/frontend/v2rayclashx/bootstrap/bootstrap.min.js"></script>
    <!-- slick slider -->
    <script src="/assets/website/js/frontend/v2rayclashx/slick/slick.min.js"></script>
    <!-- venobox -->
    <script src="/assets/website/js/frontend/v2rayclashx/Venobox/venobox.min.js"></script>
    <!-- aos -->
    <script src="/assets/website/js/frontend/v2rayclashx/aos/aos.js"></script>
    <!-- Main Script -->
    <script src="/assets/website/js/frontend/v2rayclashx/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>